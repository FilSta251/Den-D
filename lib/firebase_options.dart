/// File: lib/firebase_options.dart
// Generated by FlutterFire CLI.
// ignore_for_file: type=lint

import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart' show defaultTargetPlatform, kIsWeb, TargetPlatform;
import '../services/environment_config.dart';

/// [DefaultFirebaseOptions] poskytuje konfiguraci Firebase aplikace
/// podle platformy, na kterĂ© běťí vaĹˇe aplikace.
///
/// Pokud budete potřebovat podporu pro web nebo jinĂ© platformy, spusšte znovu FlutterFire CLI,
/// aby se konfigurace aktualizovala podle poťadavků vaĹˇí aplikace.
class DefaultFirebaseOptions {
  /// Vrací [FirebaseOptions] odpovídající aktuální platformě.
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      // Pro webovou podporu odkomentujte níťe uvedenou řádku a nakonfigurujte webovĂ© moťnosti.
      // return web;
      throw UnsupportedError(
        'FirebaseOptions for web are not configured. Run FlutterFire CLI to configure web options.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'FirebaseOptions for macOS are not configured. Run FlutterFire CLI to configure macOS options.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'FirebaseOptions for Windows are not configured. Run FlutterFire CLI to configure Windows options.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'FirebaseOptions for Linux are not configured. Run FlutterFire CLI to configure Linux options.',
        );
      default:
        throw UnsupportedError(
          'FirebaseOptions are not supported on this platform.',
        );
    }
  }

  /// Firebase konfigurace pro Android.
  static FirebaseOptions get android {
    final config = EnvironmentConfig();
    return FirebaseOptions(
      apiKey: config.getValue<String>('firebase.apiKey'),  // ZMďšNA
      appId: config.getValue<String>('firebase.appId'),  // ZMďšNA
      messagingSenderId: config.getValue<String>('firebase.messagingSenderId'),  // ZMďšNA
      projectId: config.getValue<String>('firebase.projectId'),  // ZMďšNA
      storageBucket: config.getValue<String>('firebase.storageBucket'),  // ZMďšNA
    );
  }

  static FirebaseOptions get ios {
    final config = EnvironmentConfig();
    return FirebaseOptions(
      apiKey: config.getValue<String>('firebase.apiKey'),  // ZMďšNA
      appId: config.getValue<String>('firebase.ios.appId', defaultValue: config.getValue<String>('firebase.appId')),  // ZMďšNA
      messagingSenderId: config.getValue<String>('firebase.messagingSenderId'),  // ZMďšNA
      projectId: config.getValue<String>('firebase.projectId'),  // ZMďšNA
      storageBucket: config.getValue<String>('firebase.storageBucket'),  // ZMďšNA
      iosBundleId: config.getValue<String>('firebase.ios.bundleId', defaultValue: 'com.example.svatebni-planovac'),  // ZMďšNA
    );
  }

  // Pro podporu webu odkomentujte a nakonfigurujte následující sekci:
  /*
  static FirebaseOptions get web {
    final config = EnvironmentConfig();
    return FirebaseOptions(
      apiKey: config.getValue<String>('FIREBASE_WEB_API_KEY'),
      appId: config.getValue<String>('FIREBASE_WEB_APP_ID'),
      messagingSenderId: config.getValue<String>('FIREBASE_MESSAGING_SENDER_ID'),
      projectId: config.getValue<String>('FIREBASE_PROJECT_ID'),
      storageBucket: config.getValue<String>('FIREBASE_STORAGE_BUCKET'),
    );
  }
  */
}
